Razoring like in DiscoCheck

FAILED December 2012 (perhaps requires better quiescence search)

------------------------------------------------------------------------------------------------------

Kestutis suggestion - speedup due to different updating scheme of reversible moves counter

PASSED 10.09.2012
------------------------------------------------------------------------------------------------------

Kestutis' suggestion that reduction associated with null move verification search is too big 

FAILED 10.09.2012
------------------------------------------------------------------------------------------------------

Kestutis' old attempts at pvs enhancement (but he has sent two new proposals)

FAILED 05.09.2012

-------------------------------------------------------------------------------------------------------
using depth instead of depth / ONE_PLY as input to History::OnGoodMove() (Kestutis)

FAILED 04.09.2012

-------------------------------------------------------------------------------------------------------
Quiescence search uses tt move for sorting 

FIXED 22.08.2012 (thx Kestutis)

--------------------------------------------------------------------------------------------------------
Black trapped Bishop eval has been switched off (tested for wrong Bishop color)

FIXED 18.08.2012

--------------------------------------------------------------------------------------------------------
value returned by static null move

FIXED 17.08.2012 (thx Kestutis)

--------------------------------------------------------------------------------------------------------
no TT save of a null move result if we already have a hash move

FIXED 16.08.2012 (thx Kestutis)

--------------------------------------------------------------------------------------------------------
moved IID after null move (doesn't matter right now, but improves IID developement options)

FIXED 16.08.2012 (thx Kestutis)

---------------------------------------------------------------------------
sign error in sEvaluator::Normalize()
FIXED (thx Kestutis)

--------------------------------------------------------------------------------------------------------
Kestutis: make check extension little bit smaller and dependent from isPvNode,ie from node type.
TEST FAILED

-------------------------------------------------------------------------------------------------------
TESTED AND FAILED BEFORE (this would amount to using full eval)

Kestutis: doing [null move pruning etc] it is desirable to know whether our king is in danger or not.
But ReturnFast does not counts this. Evaluating material, pst, pawn structure is OK, but
what about king safety ?

--------------------------------------------------------------------------------------------------------
Kestutis: Maybe InitPawnData(p) should be called before EvalPawns(p)?
NOT A BUG, bbPawnControl is used for mobility eval

--------------------------------------------------------------------------------------------------------
SAME SIGNS IN EvalWKingOnSq / EvalBKingSq
NOT A BUG, EvalBKingOnSq() is called with a minus sign

--------------------------------------------------------------------------------------------------------                                                                     
FIXED WITHOUT TESTING (spotted by Kestutis)
                                             
    In file eval.c in function :
  EvalWKingOnSq(sPosition *p, int sq)
  Is this line correct?
  bbKingFile = FillNorth(SqBb(sq)) | FillNorth(SqBb(sq)) ;
  Maybe should be :
  bbKingFile = FillSouth(SqBb(sq)) | FillNorth(SqBb(sq) );

--------------------------------------------------------------------------------------------------------
ACCIDENTALLY DELETED LINE IN BISHOP EVAL - FIXED BY ROLLBACK (spotted by Kestutis)

       bbAttZone = bbControl & bbKingZone[side];
	   if (bbAttZone && p->pcCount[side][Q] ) {
         AddPieceAttack(side, att_B[ PopCntSparse(bbAttZone) ] ); // MISSING LINE
	   }

   }
-----------------------------------------------------------------------------------------------------------

FIXED WITHOUT TESTING

  In file eval_degrade.c we have :
  // it's hard to win with a queen and a minor against a queen/queen + pawns
  if (p->pcCount[WHITE][P] == 0 
  && MaterialQueenMinor(p, WHITE) 
  && MaterialQueen(p, BLACK)
  && score > 0) { degradation = 16; return; }; // 1/2

  Here degradation should be set to 32 ( small oversight ? ).
  
  ----------------------------------------------------------------------------------------------
  
    NOT A BUG (conforms with FIDE rules)

  About function void DoMove(sPosition *p, int move, UNDO *u) in file movedo.c .
   If we have that MoveType(move) is CASTLE then 
   case CASTLE:
   p->reversibleMoves = 0; // reset reversibleMoves counter to zero
   .......................
    I think that this is not necessary,but can have impact on repetition detection.
   Some engines ( Rybka,Strelka ) uses this,some not.Logically - if side to move makes castle
   then after this castling probability that positions will repeat decreases.In fact castle is not
   reversible move ( like Qa1-Qa4 which has reverse move Qa4-Qa1 ) ie can not be reversed,because
   reverse move does not exist,and thus can not lead to repetition.
   This is only nuance and don't needs careful testing.

--------------------------------------------------------------------------------------------------